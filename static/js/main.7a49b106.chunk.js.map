{"version":3,"sources":["Components/Common/Form.js","Components/Common/FavNav.js","Components/GifProjectHook/Gif.js","Components/GifProjectHook/GifAppHooks.js","App.js","serviceWorker.js","index.js","assets/img/giphmeLogo.png"],"names":["Form","_ref","onSubmit","onTextChange","text","react_default","a","createElement","className","placeholder","onChange","type","value","FavNav","isFavNav","children","Gif","props","_useState","useState","_useState2","Object","slicedToArray","isGif","setIsGif","style","width","height","isFav","onClick","removeGif","addGif","alt","title","src","gif_url","still_url","GifAppHooks","setText","_useState3","_useState4","search","setSearch","gifs","arguments","length","undefined","_useState9","_useState10","setGifs","useEffect","__webpack_require__","e","then","bind","api","getGifs","data","useGetGifs","_useState5","_useState6","favGifs","setFavGifs","_useState7","_useState8","setIsFavNav","addToFavorites","findIndex","toConsumableArray","concat","removeFromFavorites","filter","document","map","key","Logo","preventDefault","target","i","images","downsized_large","url","downsized_still","App","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"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","file":"static/js/main.7a49b106.chunk.js","sourcesContent":["import React from 'react'\n\nexport default ({onSubmit,onTextChange, text}) => (\n    <form className={\"search_container\"} onSubmit={onSubmit}>\n        <input \n            className={\"search_input\"} \n            placeholder=\"Search gifs\"\n            onChange={onTextChange}\n            type=\"text\"\n            value={text}\n            />\n        <button type=\"submit\">Submit</button>\n    </form>\n)","import React from 'react'\n\nexport default ({isFavNav,children}) => (\n    <nav className={isFavNav ? \"favorites_nav_show\" :\"favorites_nav_hide\"}>\n        {children}\n    </nav>\n)","import React, { useState } from 'react'\n\nexport default (props) => {\n    let [isGif, setIsGif] = useState(true)\n\n    return (\n        <figure style={{width: props.width, height: props.height}} className={\"gifContainer\"}>\n            <div className={\"overlay_fav\"}>\n                {\n                    props.isFav\n                    ?<button className=\"fav_btn\" type=\"button\" onClick={props.removeGif}>\n                        <i className={props.isFav ?  \"fas fa-star remove_icon\" : \"fas fa-star fav_icon\"}></i>\n                        </button>\n                    :<button className=\"fav_btn\" type=\"button\" onClick={props.addGif}>                            \n                        <i className={props.isFav ?  \"fas fa-star unfav_icon\" : \"fas fa-star fav_icon\"}></i>\n                    </button>\n                }                \n            </div>\n            \n            <button className={\"gifBtn\"} type=\"button\" onClick={() => setIsGif(!isGif)}>\n                <img className={\"gifImage\"} alt={props.title} src={ isGif ? props.gif_url : props.still_url} />\n            </button>\n        </figure>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport Logo from '../../assets/img/giphmeLogo.png'\nimport Form from '../Common/Form'\nimport FavNav from '../Common/FavNav';\nimport Gif from './Gif'\n\nexport default () => {\n    const [text, setText] = useState(\"Gif App\")\n    const [search, setSearch] = useState(\"\")\n    const gifs = useGetGifs(search)\n    const [favGifs, setFavGifs] = useState([])\n    const [isFavNav, setIsFavNav] = useState(false)\n\n    function onSubmit(e) {\n        e.preventDefault()\n        setSearch(text)\n    }\n\n    function onTextChange(e) {\n        setText(e.target.value)\n    }\n\n    function addToFavorites(title, gif_url, still_url) {\n        const isExist = favGifs.findIndex( a => a.gif_url === gif_url)\n        if(isExist === -1) {\n            setFavGifs([ ...favGifs, {title, gif_url, still_url}])\n        }\n        return;\n    }\n    \n    function removeFromFavorites(gif_url) {\n         setFavGifs(favGifs.filter(a => a.gif_url !== gif_url))\n    }\n\n    function onClickFavNav() {\n        setIsFavNav(!isFavNav)\n    }\n    \n    function renderGifs() {\n        if(gifs === null) return <p>Loading...</p>\n        else if(gifs.length === 0) return <p>There are no gifs here</p>\n        return gifs.data.map( (a, i) => (\n            <Gif\n                key={a.images.downsized_large.url}\n                height={\"320px\"}\n                width={\"350px\"}\n                addGif={() => addToFavorites(a.title,a.images.downsized_large.url,a.images.downsized_still.url)}\n                removeGif={() => removeFromFavorites(a.images.downsized_large.url)}\n                title={a.title}\n                gif_url={a.images.downsized_large.url}\n                still_url={a.images.downsized_still.url}\n            />\n        ))\n    }\n\n    function renderFavGifs() {\n        if(favGifs.length === 0) return <p>There are no gifs here</p>\n        return favGifs.map( a => (\n            <Gif\n                key={a.gif_url}\n                isFav={true}\n                addGif={() => addToFavorites(a.title, a.gif_url, a.still_url)}\n                removeGif={() => removeFromFavorites(a.gif_url)}\n                height={\"160px\"}\n                width={\"290px\"}\n                title={a.title}\n                gif_url={a.gif_url}\n                still_url={a.still_url}\n        />\n        ))\n    }\n\n    useEffect( () => {document.title = text}, [text])\n\n    return (\n        <div>\n            <FavNav isFavNav={isFavNav}>\n                {renderFavGifs()}\n            </FavNav>\n\n            <header className={\"fav_text_container\"}>\n                <button onClick={() => onClickFavNav()} className={isFavNav ? \"favs_text_on\" : \"favs_text_off\"}>\n                    <i className={\"fas fa-star fav_icon\"}/>\n                </button>\n            </header>\n\n            <section>\n                <header className=\"header_container\">\n                    <figure>\n                        <img src={Logo} alt=\"Logo for this giphy app\"/>\n                    </figure>\n                    <Form \n                        onSubmit={onSubmit}\n                        onTextChange={onTextChange}\n                        text={text}\n                    />\n                </header>\n            </section>\n\n            <main className=\"main\">\n                <article>\n                    <section className={\"horizantal_container\"}>\n                        {renderGifs()}\n                    </section>\n                </article>\n            </main>\n        </div>\n    )\n}\n\n//  Custom hook\nfunction useGetGifs(text=\"\") {\n    const [gifs, setGifs] = useState([])\n    useEffect( () => {\n        import(\"../../utils/API\").then( api => {\n            api.getGifs(text, data => setGifs(data))\n        })\n    })\n\n    return gifs;\n}","import React, { Component } from 'react';\n// import GifAppClass from './Components/GifProjectClass/GifAppClass'\nimport GifAppHooks from './Components/GifProjectHook/GifAppHooks'\nimport \"./assets/css/App.css\"\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        {/* <GifAppClass /> */}\n        <GifAppHooks />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/giphmeLogo.018f336c.png\";"],"sourceRoot":""}